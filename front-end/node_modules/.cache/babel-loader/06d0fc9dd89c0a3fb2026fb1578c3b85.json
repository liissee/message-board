{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { ui } from 'reducers/ui';\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: []\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload;\n    },\n    setPostedMessage: (state, action) => {\n      //  state = action.payload\n      state.message.push(action.payload);\n    },\n    deleteMessage: (state, action) => {\n      // Filter out all message but the message with matching id\n      state.messages = state.messages.filter(message => message._id !== action.payload);\n    },\n    editMessage: (state, action) => {\n      // To find the message we want to update (message data = action.payload)\n      // If message found, return the message with updated data\n      state.messages = state.messages.map(message => {\n        if (message._id === action.payload._id) {\n          return action.payload;\n        } // Otherwhise return message as is\n\n\n        return message;\n      });\n    }\n  }\n}); //GET MESSAGES\n\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {\n      console.log(json);\n\n      if (json[0]) {\n        const replies = function (json, root) {\n          const nestedMessages = {};\n          json.forEach(message => {\n            Object.assign(nestedMessages[message._id] = nestedMessages[message._id] || {}, message);\n            nestedMessages[message.parentId] = nestedMessages[message.parentId] || {};\n            nestedMessages[message.parentId].children = nestedMessages[message.parentId].children || [];\n            nestedMessages[message.parentId].children.push(nestedMessages[message._id]);\n          });\n          return nestedMessages[root].children;\n        }(json, null);\n\n        dispatch(messages.actions.setMessage(replies));\n        console.log(replies);\n      } else {\n        dispatch(messages.actions.setMessage(json));\n      }\n    });\n  };\n}; //POST MESSAGES\n\nexport const postMessages = ({\n  message,\n  author,\n  parentId\n}) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message,\n        author,\n        parentId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      console.log(\"author\", author);\n      dispatch(messages.actions.setPostedMessage(message, author, parentId));\n      dispatch(messages.actions.setMessage(message));\n    }).catch(() => {\n      console.log(\"Failed to post message\");\n    });\n  };\n}; // DELETE MESSAGE\n\nexport const deleteMessages = ({\n  id,\n  author\n}) => {\n  return dispatch => {\n    dispatch(ui.actions.setLoading(true));\n    const accessToken = localStorage.getItem('accessToken');\n    const userId = localStorage.getItem('userId');\n    fetch(`http://localhost:8080/messages/${id}`, {\n      method: 'DELETE',\n      statusCode: 204,\n      body: JSON.stringify({\n        id,\n        author,\n        userId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: accessToken\n      }\n    }).then(() => {\n      dispatch(messages.actions.deleteMessage({\n        id,\n        author,\n        userId\n      }));\n      console.log(id, author, userId);\n      dispatch(ui.actions.setLoading(false));\n    });\n  };\n}; //EDIT MESSAGE\n\nexport const editMessages = ({\n  id,\n  author,\n  newValue\n}) => {\n  return dispatch => {\n    dispatch(ui.actions.setLoading(true));\n    const accessToken = localStorage.getItem('accessToken');\n    const userId = localStorage.getItem('userId');\n    fetch(`http://localhost:8080/messages/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        message: newValue\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: accessToken\n      }\n    }).then(res => res.json()).then(guest => {\n      dispatch(messages.actions.editMessage({\n        id,\n        author,\n        userId,\n        newValue\n      }));\n      dispatch(ui.actions.setLoading(false));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/reducers/messages.js"],"names":["createSlice","ui","messages","name","initialState","reducers","setMessage","state","action","payload","setPostedMessage","message","push","deleteMessage","filter","_id","editMessage","map","fetchMessages","dispatch","fetch","then","res","json","console","log","replies","root","nestedMessages","forEach","Object","assign","parentId","children","actions","postMessages","author","method","body","JSON","stringify","headers","catch","deleteMessages","id","setLoading","accessToken","localStorage","getItem","userId","statusCode","Authorization","editMessages","newValue","guest"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { ui } from 'reducers/ui'\n\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload\n    },\n    setPostedMessage: (state, action) => {\n      //  state = action.payload\n      state.message.push(action.payload)\n    },\n    deleteMessage: (state, action) => {\n      // Filter out all message but the message with matching id\n      state.messages = state.messages.filter(message => message._id !== action.payload)\n    },\n    editMessage: (state, action) => {\n      // To find the message we want to update (message data = action.payload)\n      // If message found, return the message with updated data\n      state.messages = state.messages.map((message) => {\n        if (message._id === action.payload._id) {\n          return action.payload\n        }\n        // Otherwhise return message as is\n        return message\n      })\n    },\n  }\n})\n\n\n//GET MESSAGES\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json)\n        if (json[0]) {\n          const replies = function (json, root) {\n            const nestedMessages = {};\n            json.forEach(message => {\n              Object.assign(nestedMessages[message._id] = nestedMessages[message._id] || {}, message);\n              nestedMessages[message.parentId] = nestedMessages[message.parentId] || {};\n              nestedMessages[message.parentId].children = nestedMessages[message.parentId].children || [];\n              nestedMessages[message.parentId].children.push(nestedMessages[message._id]);\n            });\n            return nestedMessages[root].children;\n          }(json, null);\n          dispatch(messages.actions.setMessage(replies));\n          console.log(replies)\n        } else {\n          dispatch(messages.actions.setMessage(json));\n        }\n      });\n  };\n};\n\n\n//POST MESSAGES\nexport const postMessages = ({ message, author, parentId }) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({ message, author, parentId }),\n      headers: { \"Content-Type\": \"application/json\" }\n    })\n      .then(res => {\n        console.log(\"author\", author)\n        dispatch(messages.actions.setPostedMessage(message, author, parentId));\n        dispatch(messages.actions.setMessage(message));\n      })\n      .catch(() => {\n        console.log(\"Failed to post message\")\n      })\n  }\n};\n\n// DELETE MESSAGE\nexport const deleteMessages = ({ id, author }) => {\n  return dispatch => {\n    dispatch(ui.actions.setLoading(true))\n    const accessToken = localStorage.getItem('accessToken')\n    const userId = localStorage.getItem('userId')\n\n    fetch(`http://localhost:8080/messages/${id}`, {\n      method: 'DELETE',\n      statusCode: 204,\n      body: JSON.stringify({ id, author, userId }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: accessToken\n      }\n    })\n      .then(() => {\n        dispatch(messages.actions.deleteMessage({ id, author, userId }))\n        console.log(id, author, userId)\n        dispatch(ui.actions.setLoading(false))\n      })\n  }\n}\n\n//EDIT MESSAGE\nexport const editMessages = ({ id, author, newValue }) => {\n  return dispatch => {\n    dispatch(ui.actions.setLoading(true))\n    const accessToken = localStorage.getItem('accessToken')\n    const userId = localStorage.getItem('userId')\n    fetch(`http://localhost:8080/messages/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify({ message: newValue }),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: accessToken\n      }\n    })\n      .then((res) => res.json())\n      .then((guest) => {\n        dispatch(messages.actions.editMessage({ id, author, userId, newValue }))\n        dispatch(ui.actions.setLoading(false))\n      })\n  }\n}"]},"metadata":{},"sourceType":"module"}