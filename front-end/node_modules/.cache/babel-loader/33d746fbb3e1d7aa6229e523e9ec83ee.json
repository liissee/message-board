{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: []\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload;\n    }\n  }\n});\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/').then(res => res.json()).then(json => {\n      console.log(json);\n      dispatch(messages.actions.setMessage(json));\n    });\n  };\n}; // //GET ALL MESSAGES\n// export const fetchMessages = () => {\n//   return (dispatch) => {\n//     // dispatch(ui.actions.setLoading(true))\n//     fetch(`http://localhost:8080/`)\n//       .then(res => res.json())\n//       .then(json => {\n//         console.log(json);\n//         dispatch(messages.actions.setMessage(json))\n//         // dispatch(ui.actions.setLoading(false))\n//       })\n//   }\n// }","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/reducers/messages.js"],"names":["createSlice","messages","name","initialState","reducers","setMessage","state","action","payload","fetchMessages","dispatch","fetch","then","res","json","console","log","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAGD,WAAW,CAAC;AAClCE,EAAAA,IAAI,EAAE,UAD4B;AAElCC,EAAAA,YAAY,EAAE;AACZF,IAAAA,QAAQ,EAAE;AADE,GAFoB;AAKlCG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACL,QAAN,GAAiBM,MAAM,CAACC,OAAxB;AACD;AAHO;AALwB,CAAD,CAA5B;AAYP,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,SAAQC,QAAD,IAAc;AACnBC,IAAAA,KAAK,CAAC,wBAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESE,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAJ,MAAAA,QAAQ,CAACT,QAAQ,CAACgB,OAAT,CAAiBZ,UAAjB,CAA4BS,IAA5B,CAAD,CAAR;AACD,KALH;AAMD,GAPD;AAQD,CATM,C,CAWP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: []\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload\n    }\n  }\n})\n\nexport const fetchMessages = () => {\n  return (dispatch) => {\n    fetch('http://localhost:8080/')\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        dispatch(messages.actions.setMessage(json));\n      });\n  };\n};\n\n// //GET ALL MESSAGES\n// export const fetchMessages = () => {\n//   return (dispatch) => {\n//     // dispatch(ui.actions.setLoading(true))\n//     fetch(`http://localhost:8080/`)\n//       .then(res => res.json())\n\n//       .then(json => {\n//         console.log(json);\n//         dispatch(messages.actions.setMessage(json))\n//         // dispatch(ui.actions.setLoading(false))\n//       })\n//   }\n// }"]},"metadata":{},"sourceType":"module"}