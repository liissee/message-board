{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n    replies: []\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload;\n    },\n    setPostedMessage: (state, action) => {\n      state = action.payload;\n    },\n    setReplyMessage: (state, action) => {\n      const _action$payload = action.payload,\n            parentId = _action$payload.parentId,\n            message = _action$payload.message;\n      const reply = state.messages.filter(reply => reply.id === parentId);\n      state.replies.push({\n        reply\n      });\n    }\n  }\n}); //GET MESSAGES\n\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {\n      console.log(json);\n      dispatch(messages.actions.setMessage(json));\n    });\n  };\n}; //GET REPLIES\n\nexport const fetchReplies = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {\n      console.log(json);\n      dispatch(messages.actions.setReplyMessage(json));\n    });\n  };\n}; //POST MESSAGES\n\nexport const postMessages = ({\n  message,\n  author,\n  parentId\n}) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message,\n        author,\n        parentId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      dispatch(messages.actions.setPostedMessage(message, author, parentId));\n    }).catch(() => {\n      console.log(\"Failed to post message\");\n    });\n  };\n}; // //POST REPLY\n// export const replyMessage = ({ message, author, id }) => {\n//   return dispatch => {\n//     fetch(`http://localhost:8080/messages/${id}/reply`, {\n//       method: \"POST\",\n//       body: JSON.stringify({ message, author, parentId: id }),\n//       headers: { \"Content-Type\": \"application/json\" }\n//     })\n//       .then(res => {\n//         dispatch(messages.actions.setReplyMessage({ message, author, parentId: id }));\n//         console.log(message)\n//       })\n//       .catch(console.log(\"Failed to reply\"))\n//   };\n// };","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/reducers/messages.js"],"names":["createSlice","messages","name","initialState","replies","reducers","setMessage","state","action","payload","setPostedMessage","setReplyMessage","parentId","message","reply","filter","id","push","fetchMessages","dispatch","fetch","then","res","json","console","log","actions","fetchReplies","postMessages","author","method","body","JSON","stringify","headers","catch"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n    replies: [],\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload\n    },\n    setPostedMessage: (state, action) => {\n      state = action.payload\n    },\n    setReplyMessage: (state, action) => {\n      const { parentId, message } = action.payload\n      const reply = state.messages.filter((reply) => reply.id === parentId)\n      state.replies.push({\n        reply\n      })\n    }\n  }\n})\n\n\n//GET MESSAGES\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        dispatch(messages.actions.setMessage(json));\n      });\n  };\n};\n\n//GET REPLIES\nexport const fetchReplies = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        dispatch(messages.actions.setReplyMessage(json));\n      });\n  };\n};\n\n//POST MESSAGES\nexport const postMessages = ({ message, author, parentId }) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({ message, author, parentId }),\n      headers: { \"Content-Type\": \"application/json\" }\n    })\n      .then(res => {\n        dispatch(messages.actions.setPostedMessage(message, author, parentId));\n      })\n      .catch(() => {\n        console.log(\"Failed to post message\")\n      })\n  }\n};\n\n\n// //POST REPLY\n// export const replyMessage = ({ message, author, id }) => {\n//   return dispatch => {\n//     fetch(`http://localhost:8080/messages/${id}/reply`, {\n//       method: \"POST\",\n//       body: JSON.stringify({ message, author, parentId: id }),\n//       headers: { \"Content-Type\": \"application/json\" }\n//     })\n//       .then(res => {\n//         dispatch(messages.actions.setReplyMessage({ message, author, parentId: id }));\n//         console.log(message)\n\n//       })\n//       .catch(console.log(\"Failed to reply\"))\n//   };\n// };\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}