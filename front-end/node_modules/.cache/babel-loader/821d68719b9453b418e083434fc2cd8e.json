{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: []\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload;\n    },\n    setPostedMessage: (state, action) => {\n      state = action.payload;\n    }\n  }\n}); //GET MESSAGES\n\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/').then(res => res.json()).then(json => {\n      console.log(json);\n      dispatch(messages.actions.setMessage(json));\n    });\n  };\n}; //POST MESSAGES\n\nexport const postMessages = ({\n  message,\n  author\n}) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message,\n        author\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error(\"Can't post message\");\n      } else {\n        return res.json();\n      }\n    }).then(({\n      message,\n      author\n    }) => {\n      dispatch(messages.actions.postMessages({\n        message,\n        author\n      }));\n    }); // .catch(console.log(\"Failed to post message\"))\n  };\n};","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/reducers/messages.js"],"names":["createSlice","messages","name","initialState","reducers","setMessage","state","action","payload","setPostedMessage","fetchMessages","dispatch","fetch","then","res","json","console","log","actions","postMessages","message","author","method","body","JSON","stringify","headers","ok","Error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAGD,WAAW,CAAC;AAClCE,EAAAA,IAAI,EAAE,UAD4B;AAElCC,EAAAA,YAAY,EAAE;AACZF,IAAAA,QAAQ,EAAE;AADE,GAFoB;AAKlCG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACL,QAAN,GAAiBM,MAAM,CAACC,OAAxB;AACD,KAHO;AAIRC,IAAAA,gBAAgB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,GAAGC,MAAM,CAACC,OAAf;AACD;AANO;AALwB,CAAD,CAA5B,C,CAeP;;AACA,OAAO,MAAME,aAAa,GAAG,MAAM;AACjC,SAAQC,QAAD,IAAc;AACnBC,IAAAA,KAAK,CAAC,wBAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESE,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAJ,MAAAA,QAAQ,CAACV,QAAQ,CAACiB,OAAT,CAAiBb,UAAjB,CAA4BU,IAA5B,CAAD,CAAR;AACD,KALH;AAMD,GAPD;AAQD,CATM,C,CAWP;;AACA,OAAO,MAAMI,YAAY,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAyB;AACnD,SAAQV,QAAD,IAAc;AACnBC,IAAAA,KAAK,CAAC,wBAAD,EAA2B;AAC9BU,MAAAA,MAAM,EAAE,MADsB;AAE9BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,QAAAA,OAAF;AAAWC,QAAAA;AAAX,OAAf,CAFwB;AAG9BK,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAHqB,KAA3B,CAAL,CAKGb,IALH,CAKQC,GAAG,IAAI;AACX,UAAI,CAACA,GAAG,CAACa,EAAT,EAAa;AACX,cAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD,OAFD,MAEO;AACL,eAAOd,GAAG,CAACC,IAAJ,EAAP;AACD;AACF,KAXH,EAWKF,IAXL,CAWU,CAAC;AAAEO,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAD,KAAyB;AAC/BV,MAAAA,QAAQ,CAACV,QAAQ,CAACiB,OAAT,CAAiBC,YAAjB,CAA8B;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,OAA9B,CAAD,CAAR;AACD,KAbH,EADmB,CAenB;AACD,GAhBD;AAiBD,CAlBM","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: []\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload\n    },\n    setPostedMessage: (state, action) => {\n      state = action.payload\n    }\n  }\n})\n\n//GET MESSAGES\nexport const fetchMessages = () => {\n  return (dispatch) => {\n    fetch('http://localhost:8080/')\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        dispatch(messages.actions.setMessage(json));\n      });\n  };\n};\n\n//POST MESSAGES\nexport const postMessages = ({ message, author }) => {\n  return (dispatch) => {\n    fetch(\"http://localhost:8080/\", {\n      method: \"POST\",\n      body: JSON.stringify({ message, author }),\n      headers: { \"Content-Type\": \"application/json\" }\n    })\n      .then(res => {\n        if (!res.ok) {\n          throw new Error(\"Can't post message\")\n        } else {\n          return res.json();\n        }\n      }).then(({ message, author }) => {\n        dispatch(messages.actions.postMessages({ message, author }));\n      })\n    // .catch(console.log(\"Failed to post message\"))\n  };\n};\n\n"]},"metadata":{},"sourceType":"module"}