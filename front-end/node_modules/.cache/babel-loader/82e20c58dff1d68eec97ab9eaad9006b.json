{"ast":null,"code":"import _slicedToArray from \"/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/components/ShowMessages.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchMessages } from 'reducers/messages';\nimport { Card } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { PostMessage } from './PostMessage';\nimport { ReplyMessage } from './ReplyMessage';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Timestamp } from 'components/Timestamp';\nconst Main = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n& {\n.messageCard {\n  margin: 10px;\n  width: 400px;\n}\n}\n`; // const Card = styled.div`\n// width: 400px;\n// /* border: 1px solid lightgrey; */\n// `\n\nconst Rotate = styled.div`\n& {\n  .expand {\n    transform: rotate(0deg);\n    margin-left: auto;\n  }\n  .expandOpen {\n    transform: rotate(180deg);\n  }\n}\n`; // const Rotate = styled.div`\n//   transform: ${props => (props.selected ? \"rotate(0deg)\" : \"rotate(180deg)\")};\n//     background: ${props => (props.selected ? \"red\" : \"green\")};\n//   `\n\nexport const ShowMessages = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        expanded = _useState2[0],\n        setExpanded = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isOpen = _useState4[0],\n        setIsOpen = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        messages = _useState6[0],\n        setMessages = _useState6[1]; //GET MESSAGES\n\n\n  useEffect(() => {\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {\n      setMessages(json);\n      console.log(json);\n      setIsOpen(json.map((message, index) => index = false));\n    });\n  }, []); // const handleDropdownClick = e => {\n  //   e.preventDefault();\n  //   const currentID = e.currentTarget.id;\n  //   const newIsOpenState = isOpen[id] = !isOpen[id];\n  //   setIsOpen(newIsOpenState);\n  // };\n\n  const handleDropdownClick = index => {\n    const clicked = isOpen;\n    clicked[index] = !clicked[index];\n    setIsOpen(clicked);\n  }; // const [selectedPost, setSelectedPost] = useState({})\n\n\n  console.log(isOpen); // const dispatch = useDispatch();\n  // const handleExpandClick = () => {\n  //   setExpanded({ selectedItem: i })\n  // };\n  // useEffect(() => {\n  //   dispatch(fetchMessages());\n  // }, [dispatch]);\n  // const messages = useSelector((state) => state.messages.messages)\n  // const indexFalse = () => {\n  // setExpanded(messages.map((message, index) => { index: false }));\n  // messages.forEach(message => expanded.push({ messageId: message._id, index: false }))\n  //I suppose you can get an id or similar identifers\n  // }\n  // indexFalse()\n\n  console.log(messages[0]); // const handleExpandClick = e => {\n  //   e.preventDefault();\n  //   const currentID = e.currentTarget.id;\n  //   console.log(currentID)\n  //   const newIsOpenState = expanded[messages._id] = !expanded[messages._id];\n  //   setExpanded(newIsOpenState);\n  // };\n  // const selectedMessageId = messages._id;\n  // const isMessageSelected = messages._id === selectedMessageId;\n  // console.log(\"id\", messages._id)\n  // console.log(\"selecetd\", isMessageSelected)\n  // const handleExpandClick = () => {\n  //   setExpanded(!expanded);\n  // };\n\n  return React.createElement(Main, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(PostMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), messages.map((message, index) => React.createElement(Card, {\n    className: \"messageCard\",\n    key: message._id,\n    id: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    avatar: React.createElement(Avatar, {\n      \"aria-label\": \"author\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"R\"),\n    title: message.author,\n    subheader: React.createElement(Timestamp, {\n      createdAt: message.createdAt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Message: \", message.message), React.createElement(ReplyMessage, {\n    parentId: message._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  })), React.createElement(Rotate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    className: expanded ? \"expandOpen\" : \"expand\",\n    onClick: handleDropdownClick,\n    \"aria-expanded\": expanded,\n    \"aria-label\": \"show more\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(ExpandMoreIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }))), React.createElement(Collapse, {\n    toggleopen: isOpen[index],\n    in: expanded,\n    timeout: \"auto\",\n    unmountOnExit: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"Replies:\"), React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Heat 1/2 cup of the broth in a pot until simmering, add saffron and set aside for 10 minutes.\")))))) // <MessageBox>\n  //   <PostMessage />\n  //   {messages.map((message) => (\n  //     <Card className=\"messageCard\" key={message._id}>\n  //       <div>Message: {message.message}</div>\n  //       <div>Author: {message.author}</div>\n  //       <div>Time: {message.createdAt}</div>\n  //       <ReplyMessage id={message._id} />\n  //     </Card>\n  //   ))}\n  // </MessageBox>\n  ;\n};","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/components/ShowMessages.js"],"names":["React","useState","useEffect","useSelector","useDispatch","fetchMessages","Card","styled","PostMessage","ReplyMessage","CardHeader","CardContent","Collapse","Avatar","IconButton","Typography","ExpandMoreIcon","Timestamp","Main","div","Rotate","ShowMessages","props","expanded","setExpanded","isOpen","setIsOpen","messages","setMessages","fetch","then","res","json","console","log","map","message","index","handleDropdownClick","clicked","_id","author","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchMessages } from 'reducers/messages';\nimport { Card } from '@material-ui/core';\nimport styled from 'styled-components'\nimport { PostMessage } from './PostMessage';\nimport { ReplyMessage } from './ReplyMessage';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Timestamp } from 'components/Timestamp'\n\nconst Main = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n& {\n.messageCard {\n  margin: 10px;\n  width: 400px;\n}\n}\n`\n// const Card = styled.div`\n// width: 400px;\n// /* border: 1px solid lightgrey; */\n// `\n\nconst Rotate = styled.div`\n& {\n  .expand {\n    transform: rotate(0deg);\n    margin-left: auto;\n  }\n  .expandOpen {\n    transform: rotate(180deg);\n  }\n}\n`\n\n// const Rotate = styled.div`\n//   transform: ${props => (props.selected ? \"rotate(0deg)\" : \"rotate(180deg)\")};\n//     background: ${props => (props.selected ? \"red\" : \"green\")};\n//   `\n\nexport const ShowMessages = (props) => {\n  const [expanded, setExpanded] = useState(false)\n  const [isOpen, setIsOpen] = useState({});\n  const [messages, setMessages] = useState([]);\n\n\n  //GET MESSAGES\n  useEffect(() => {\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n        setMessages(json);\n        console.log(json)\n        setIsOpen(json.map((message, index) => (index = false)));\n      });\n  }, [])\n\n\n  // const handleDropdownClick = e => {\n  //   e.preventDefault();\n  //   const currentID = e.currentTarget.id;\n  //   const newIsOpenState = isOpen[id] = !isOpen[id];\n  //   setIsOpen(newIsOpenState);\n  // };\n\n  const handleDropdownClick = index => {\n    const clicked = isOpen;\n    clicked[index] = !clicked[index];\n    setIsOpen(clicked);\n  }\n  // const [selectedPost, setSelectedPost] = useState({})\n  console.log(isOpen)\n  // const dispatch = useDispatch();\n\n  // const handleExpandClick = () => {\n  //   setExpanded({ selectedItem: i })\n  // };\n\n\n  // useEffect(() => {\n  //   dispatch(fetchMessages());\n  // }, [dispatch]);\n\n  // const messages = useSelector((state) => state.messages.messages)\n\n\n  // const indexFalse = () => {\n  // setExpanded(messages.map((message, index) => { index: false }));\n  // messages.forEach(message => expanded.push({ messageId: message._id, index: false }))\n  //I suppose you can get an id or similar identifers\n  // }\n  // indexFalse()\n\n  console.log(messages[0])\n\n  // const handleExpandClick = e => {\n  //   e.preventDefault();\n  //   const currentID = e.currentTarget.id;\n  //   console.log(currentID)\n  //   const newIsOpenState = expanded[messages._id] = !expanded[messages._id];\n  //   setExpanded(newIsOpenState);\n  // };\n\n  // const selectedMessageId = messages._id;\n  // const isMessageSelected = messages._id === selectedMessageId;\n  // console.log(\"id\", messages._id)\n  // console.log(\"selecetd\", isMessageSelected)\n\n  // const handleExpandClick = () => {\n  //   setExpanded(!expanded);\n  // };\n\n  return (\n    <Main>\n      <PostMessage />\n      {messages.map((message, index) => (\n        <Card className=\"messageCard\" key={message._id} id={index}>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"author\">\n                R\n          </Avatar>\n            }\n            title={message.author}\n            subheader={<Timestamp createdAt={message.createdAt} />}\n          />\n          <CardContent>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\">\n              Message: {message.message}\n            </Typography>\n            <ReplyMessage parentId={message._id} />\n          </CardContent>\n          <Rotate>\n            <IconButton\n              className={expanded ? \"expandOpen\" : \"expand\"}\n              onClick={handleDropdownClick}\n              aria-expanded={expanded}\n              aria-label=\"show more\"\n            >\n              <ExpandMoreIcon />\n            </IconButton>\n          </Rotate>\n\n          <Collapse toggleopen={isOpen[index]} in={expanded} timeout=\"auto\" unmountOnExit>\n            <CardContent>\n              <Typography>Replies:</Typography>\n              <Typography>\n                Heat 1/2 cup of the broth in a pot until simmering, add saffron and\n                set aside for 10 minutes.\n          </Typography>\n            </CardContent>\n          </Collapse>\n        </Card>\n      ))}\n    </Main>\n\n\n    // <MessageBox>\n    //   <PostMessage />\n\n    //   {messages.map((message) => (\n    //     <Card className=\"messageCard\" key={message._id}>\n    //       <div>Message: {message.message}</div>\n    //       <div>Author: {message.author}</div>\n    //       <div>Time: {message.createdAt}</div>\n    //       <ReplyMessage id={message._id} />\n\n    //     </Card>\n    //   ))}\n    // </MessageBox>\n  )\n}"]},"metadata":{},"sourceType":"module"}