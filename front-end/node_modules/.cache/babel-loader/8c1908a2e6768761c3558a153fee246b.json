{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n    replies: {}\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload;\n    },\n    setPostedMessage: (state, action) => {\n      state.message.push(action.payload);\n    },\n    setReplyMessage: (state, action) => {\n      state.messages = action.payload;\n    }\n  }\n}); //GET MESSAGES\n\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {\n      console.log(json);\n\n      const replies = function (json, root) {\n        const nestedMessages = {};\n        json.forEach(message => {\n          Object.assign(nestedMessages[message._id] = nestedMessages[message._id] || {}, message);\n          nestedMessages[message.parentId] = nestedMessages[message.parentId] || {};\n          nestedMessages[message.parentId].children = nestedMessages[message.parentId].children || [];\n          nestedMessages[message.parentId].children.push(nestedMessages[message._id]);\n        });\n        console.log(nestedMessages);\n        return nestedMessages[root].children;\n      }(json, null);\n\n      console.log(replies);\n      dispatch(messages.actions.setMessage(replies));\n    });\n  };\n}; //POST MESSAGES\n\nexport const postMessages = ({\n  message,\n  author,\n  parentId\n}) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message,\n        author,\n        parentId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      dispatch(messages.actions.setPostedMessage(message, author, parentId));\n    }).catch(() => {\n      console.log(\"Failed to post message\");\n    });\n  };\n}; // //POST REPLY\n// export const replyMessage = ({ message, author, id }) => {\n//   return dispatch => {\n//     fetch(`http://localhost:8080/messages/${id}/reply`, {\n//       method: \"POST\",\n//       body: JSON.stringify({ message, author, parentId: id }),\n//       headers: { \"Content-Type\": \"application/json\" }\n//     })\n//       .then(res => {\n//         dispatch(messages.actions.setReplyMessage({ message, author, parentId: id }));\n//         console.log(message)\n//       })\n//       .catch(console.log(\"Failed to reply\"))\n//   };\n// };","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/reducers/messages.js"],"names":["createSlice","messages","name","initialState","replies","reducers","setMessage","state","action","payload","setPostedMessage","message","push","setReplyMessage","fetchMessages","dispatch","fetch","then","res","json","console","log","root","nestedMessages","forEach","Object","assign","_id","parentId","children","actions","postMessages","author","method","body","JSON","stringify","headers","catch"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n    replies: {}\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload\n    },\n    setPostedMessage: (state, action) => {\n      state.message.push(action.payload)\n    },\n    setReplyMessage: (state, action) => {\n      state.messages = action.payload\n    }\n  }\n})\n\n\n//GET MESSAGES\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        const replies = function (json, root) {\n          const nestedMessages = {};\n          json.forEach(message => {\n            Object.assign(nestedMessages[message._id] = nestedMessages[message._id] || {}, message);\n            nestedMessages[message.parentId] = nestedMessages[message.parentId] || {};\n            nestedMessages[message.parentId].children = nestedMessages[message.parentId].children || [];\n            nestedMessages[message.parentId].children.push(nestedMessages[message._id]);\n          });\n          console.log(nestedMessages)\n          return nestedMessages[root].children;\n        }(json, null);\n\n        console.log(replies);\n        dispatch(messages.actions.setMessage(replies));\n      });\n  };\n};\n\n\n//POST MESSAGES\nexport const postMessages = ({ message, author, parentId }) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({ message, author, parentId }),\n      headers: { \"Content-Type\": \"application/json\" }\n    })\n      .then(res => {\n        dispatch(messages.actions.setPostedMessage(message, author, parentId));\n      })\n      .catch(() => {\n        console.log(\"Failed to post message\")\n      })\n  }\n};\n\n\n// //POST REPLY\n// export const replyMessage = ({ message, author, id }) => {\n//   return dispatch => {\n//     fetch(`http://localhost:8080/messages/${id}/reply`, {\n//       method: \"POST\",\n//       body: JSON.stringify({ message, author, parentId: id }),\n//       headers: { \"Content-Type\": \"application/json\" }\n//     })\n//       .then(res => {\n//         dispatch(messages.actions.setReplyMessage({ message, author, parentId: id }));\n//         console.log(message)\n\n//       })\n//       .catch(console.log(\"Failed to reply\"))\n//   };\n// };\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}