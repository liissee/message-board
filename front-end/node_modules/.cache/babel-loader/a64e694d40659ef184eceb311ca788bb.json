{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n    replies: {}\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload;\n    },\n    setPostedMessage: (state, action) => {\n      state = action.payload;\n    },\n    setReplyMessage: (state, action) => {\n      state.messages = action.payload; // const { parentId, message } = action.payload\n      // const reply = state.messages.filter((r) => r.id === parentId)\n      // state.replies.push({\n      //   reply\n      // })\n      //  const replies = {};\n      // move all the comments into a map of id => comment\n      // state.messages.forEach(comment => state.replies[comment._id] = comment);\n      // // iterate over the comments again and correctly nest the children\n      // state.messages.forEach(comment => {\n      //   if (comment.parentId !== null) {\n      //     const parent = state.replies[comment.parentId];\n      //     parent.children = (parent.children || []).push(comment);\n      //   }\n      // });\n      // filter the list to return a list of correctly nested comments\n      // return state.messages.filter(comment => {\n      //   return comment.parentId === null;\n      // });\n    }\n  }\n}); //GET MESSAGES\n\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {\n      console.log(json);\n      const newArr = json.map(x => (arr.map(x => Object.keys(x)).reduce((a, b) => (b.forEach(z => a.includes(z) || a.push(z)), a)).forEach(y => x[y] = x.hasOwnProperty(y) ? x[y] : null), x));\n      console.log(newArr); // const replies = function (json, root) {\n      //   const nestedMessages = {};\n      //   json.forEach(message => {\n      //     Object.assign(nestedMessages[message._id] = nestedMessages[message._id] || {}, message);\n      //     // console.log(nestedMessages)\n      //     nestedMessages[message.parentId] = nestedMessages[message.parentId] || {};\n      //     // console.log(nestedMessages)\n      //     nestedMessages[message.parentId].children = nestedMessages[message.parentId].children || [];\n      //     // console.log(nestedMessages)\n      //     nestedMessages[message.parentId].children.push(nestedMessages[message._id]);\n      //     console.log(nestedMessages)\n      //   });\n      //   console.log(nestedMessages)\n      //   return nestedMessages[root].children;\n      // }(json, null);\n      // console.log(replies);\n\n      dispatch(messages.actions.setMessage(json));\n    });\n  };\n}; //GET REPLIES\n\nexport const fetchReplies = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {// dispatch(messages.actions.setReplyMessage(json));\n    });\n  };\n}; //POST MESSAGES\n\nexport const postMessages = ({\n  message,\n  author,\n  parentId\n}) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message,\n        author,\n        parentId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      dispatch(messages.actions.setPostedMessage(message, author, parentId));\n    }).catch(() => {\n      console.log(\"Failed to post message\");\n    });\n  };\n}; // //POST REPLY\n// export const replyMessage = ({ message, author, id }) => {\n//   return dispatch => {\n//     fetch(`http://localhost:8080/messages/${id}/reply`, {\n//       method: \"POST\",\n//       body: JSON.stringify({ message, author, parentId: id }),\n//       headers: { \"Content-Type\": \"application/json\" }\n//     })\n//       .then(res => {\n//         dispatch(messages.actions.setReplyMessage({ message, author, parentId: id }));\n//         console.log(message)\n//       })\n//       .catch(console.log(\"Failed to reply\"))\n//   };\n// };","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/reducers/messages.js"],"names":["createSlice","messages","name","initialState","replies","reducers","setMessage","state","action","payload","setPostedMessage","setReplyMessage","fetchMessages","dispatch","fetch","then","res","json","console","log","newArr","map","x","arr","Object","keys","reduce","a","b","forEach","z","includes","push","y","hasOwnProperty","actions","fetchReplies","postMessages","message","author","parentId","method","body","JSON","stringify","headers","catch"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n    replies: {}\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload\n    },\n    setPostedMessage: (state, action) => {\n      state = action.payload\n    },\n    setReplyMessage: (state, action) => {\n      state.messages = action.payload\n\n      // const { parentId, message } = action.payload\n      // const reply = state.messages.filter((r) => r.id === parentId)\n\n      // state.replies.push({\n      //   reply\n      // })\n\n      //  const replies = {};\n\n      // move all the comments into a map of id => comment\n      // state.messages.forEach(comment => state.replies[comment._id] = comment);\n\n      // // iterate over the comments again and correctly nest the children\n      // state.messages.forEach(comment => {\n      //   if (comment.parentId !== null) {\n      //     const parent = state.replies[comment.parentId];\n      //     parent.children = (parent.children || []).push(comment);\n      //   }\n      // });\n\n      // filter the list to return a list of correctly nested comments\n      // return state.messages.filter(comment => {\n      //   return comment.parentId === null;\n      // });\n\n    }\n  }\n})\n\n\n//GET MESSAGES\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        const newArr = json.map(x => (\n          arr.map(x => Object.keys(x))\n            .reduce((a, b) =>\n              (b.forEach(z => a.includes(z) || a.push(z)), a)\n            )\n            .forEach(\n              y => (x[y] = x.hasOwnProperty(y) ? x[y] : null)\n            ), x)\n        );\n        console.log(newArr)\n        // const replies = function (json, root) {\n        //   const nestedMessages = {};\n\n        //   json.forEach(message => {\n        //     Object.assign(nestedMessages[message._id] = nestedMessages[message._id] || {}, message);\n        //     // console.log(nestedMessages)\n\n        //     nestedMessages[message.parentId] = nestedMessages[message.parentId] || {};\n        //     // console.log(nestedMessages)\n\n        //     nestedMessages[message.parentId].children = nestedMessages[message.parentId].children || [];\n        //     // console.log(nestedMessages)\n\n        //     nestedMessages[message.parentId].children.push(nestedMessages[message._id]);\n        //     console.log(nestedMessages)\n\n        //   });\n        //   console.log(nestedMessages)\n\n        //   return nestedMessages[root].children;\n\n        // }(json, null);\n\n        // console.log(replies);\n        dispatch(messages.actions.setMessage(json));\n      });\n  };\n};\n\n//GET REPLIES\nexport const fetchReplies = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n\n        // dispatch(messages.actions.setReplyMessage(json));\n      });\n  };\n};\n\n//POST MESSAGES\nexport const postMessages = ({ message, author, parentId }) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({ message, author, parentId }),\n      headers: { \"Content-Type\": \"application/json\" }\n    })\n      .then(res => {\n        dispatch(messages.actions.setPostedMessage(message, author, parentId));\n      })\n      .catch(() => {\n        console.log(\"Failed to post message\")\n      })\n  }\n};\n\n\n// //POST REPLY\n// export const replyMessage = ({ message, author, id }) => {\n//   return dispatch => {\n//     fetch(`http://localhost:8080/messages/${id}/reply`, {\n//       method: \"POST\",\n//       body: JSON.stringify({ message, author, parentId: id }),\n//       headers: { \"Content-Type\": \"application/json\" }\n//     })\n//       .then(res => {\n//         dispatch(messages.actions.setReplyMessage({ message, author, parentId: id }));\n//         console.log(message)\n\n//       })\n//       .catch(console.log(\"Failed to reply\"))\n//   };\n// };\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}