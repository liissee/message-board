{"ast":null,"code":"var _jsxFileName = \"/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/components/ShowMessages.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchMessages } from 'reducers/messages';\nimport { Card, Button } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { PostReply } from './PostReply';\nimport { MessageCard } from './MessageCard';\nimport moment from \"moment\";\nimport { LoadingIndicator } from './Loading';\nconst Main = styled.div`\n/* display: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center; */\n`;\nexport const ShowMessages = props => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchMessages());\n  }, [dispatch]); // const userName = useSelector((state) => state.users.userName)\n\n  const messages = useSelector(state => state.messages.messages);\n  const loading = useSelector(state => state.ui.isLoading);\n  console.log(messages);\n  return React.createElement(Main, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, loading && React.createElement(LoadingIndicator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), !loading && messages < 1 && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Currently no posted messages\"), messages.map(message => React.createElement(MessageCard, {\n    key: message._id,\n    id: message._id,\n    author: message.author,\n    message: message.message,\n    createdAt: moment(message.createdAt).format('ll'),\n    children: message.children,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })));\n}; // return (\n//   <Main>\n//     {messages.map((message, index) => (\n//       <Card className=\"messageCard\" key={message._id} selected={index}>\n//         <CardHeader\n//           avatar={\n//             <Avatar aria-label=\"author\">\n//               R\n//           </Avatar>\n//           }\n//           title={message.author}\n//           subheader={<Timestamp createdAt={message.createdAt} />}\n//         />\n//         <DeleteMessage id={message._id} author={message.author} />\n//         <EditMessage id={message._id} author={message.author} message={message.message} />\n//         <CardContent>\n//           <Typography variant=\"body2\" color=\"textSecondary\">\n//             Message: {message.message}\n//           </Typography>\n//           <PostReply parentId={message._id} />\n//           {/* <ToggleComments parentId={message._id} /> */}\n//         </CardContent>\n//         <Rotate>\n//           <IconButton\n//             className={expanded ? \"expandOpen\" : \"expand\"}\n//             onClick={handleExpandClick}\n//             // onClick={() => setExpanded({ expanded: index })}\n//             // selected={this.determineItemStyle(i)}\n//             aria-expanded={expanded}\n//             aria-label=\"show more\"\n//           >\n//             <ExpandMoreIcon />\n//           </IconButton>\n//         </Rotate>\n//         <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n//           <CardContent className=\"replyContainer\">\n//             {message.children && message.children.length && message.children.length > 0 && message.children.map((reply) => (\n//               <CardContent key={reply._id} className=\"replyCard\">\n//                 <CardHeader\n//                   avatar={\n//                     <Avatar aria-label=\"author\">\n//                       R\n//                   </Avatar>\n//                   }\n//                   title={userName}\n//                   subheader={<Timestamp createdAt={reply.createdAt} />}\n//                 />\n//                 <Typography variant=\"body2\" color=\"textSecondary\">{reply.message}</Typography>\n//               </CardContent>\n//             ))}\n//           </CardContent>\n//         </Collapse>\n//       </Card>\n//     ))\n//     }\n//   </Main>\n// )\n// }","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/components/ShowMessages.js"],"names":["React","useState","useEffect","useSelector","useDispatch","fetchMessages","Card","Button","styled","PostReply","MessageCard","moment","LoadingIndicator","Main","div","ShowMessages","props","dispatch","messages","state","loading","ui","isLoading","console","log","map","message","_id","author","createdAt","format","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,mBAA7B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,gBAAT,QAAiC,WAAjC;AAEA,MAAMC,IAAI,GAAGL,MAAM,CAACM,GAAI;;;;;CAAxB;AAQA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;AACrC,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACZ,aAAa,EAAd,CAAR;AACD,GAFQ,EAEN,CAACY,QAAD,CAFM,CAAT,CAHqC,CAQrC;;AACA,QAAMC,QAAQ,GAAGf,WAAW,CAAEgB,KAAD,IAAWA,KAAK,CAACD,QAAN,CAAeA,QAA3B,CAA5B;AACA,QAAME,OAAO,GAAGjB,WAAW,CAACgB,KAAK,IAAIA,KAAK,CAACE,EAAN,CAASC,SAAnB,CAA3B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AAGA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,OAAO,IAAI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADd,EAEG,CAACA,OAAD,IAAaF,QAAQ,GAAG,CAAxB,IAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAFjC,EAIGA,QAAQ,CAACO,GAAT,CAAaC,OAAO,IACnB,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEA,OAAO,CAACC,GADf;AAEE,IAAA,EAAE,EAAED,OAAO,CAACC,GAFd;AAGE,IAAA,MAAM,EAAED,OAAO,CAACE,MAHlB;AAIE,IAAA,OAAO,EAAEF,OAAO,CAACA,OAJnB;AAKE,IAAA,SAAS,EAAEf,MAAM,CAACe,OAAO,CAACG,SAAT,CAAN,CAA0BC,MAA1B,CAAiC,IAAjC,CALb;AAME,IAAA,QAAQ,EAAEJ,OAAO,CAACK,QANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAJH,CADF;AAiBD,CAhCM,C,CAmCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchMessages } from 'reducers/messages';\nimport { Card, Button } from '@material-ui/core';\nimport styled from 'styled-components'\nimport { PostReply } from './PostReply';\nimport { MessageCard } from './MessageCard';\nimport moment from \"moment\"\nimport { LoadingIndicator } from './Loading';\n\nconst Main = styled.div`\n/* display: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center; */\n`\n\n\nexport const ShowMessages = (props) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchMessages());\n  }, [dispatch]);\n\n\n  // const userName = useSelector((state) => state.users.userName)\n  const messages = useSelector((state) => state.messages.messages)\n  const loading = useSelector(state => state.ui.isLoading)\n\n  console.log(messages)\n\n\n  return (\n    <Main>\n      {loading && <LoadingIndicator />}\n      {!loading && (messages < 1) && <div>Currently no posted messages</div>}\n\n      {messages.map(message => (\n        <MessageCard\n          key={message._id}\n          id={message._id}\n          author={message.author}\n          message={message.message}\n          createdAt={moment(message.createdAt).format('ll')}\n          children={message.children}\n        />\n      ))}\n    </Main>\n  )\n}\n\n\n// return (\n//   <Main>\n//     {messages.map((message, index) => (\n//       <Card className=\"messageCard\" key={message._id} selected={index}>\n//         <CardHeader\n//           avatar={\n//             <Avatar aria-label=\"author\">\n//               R\n//           </Avatar>\n//           }\n//           title={message.author}\n//           subheader={<Timestamp createdAt={message.createdAt} />}\n//         />\n//         <DeleteMessage id={message._id} author={message.author} />\n//         <EditMessage id={message._id} author={message.author} message={message.message} />\n//         <CardContent>\n//           <Typography variant=\"body2\" color=\"textSecondary\">\n//             Message: {message.message}\n//           </Typography>\n//           <PostReply parentId={message._id} />\n//           {/* <ToggleComments parentId={message._id} /> */}\n//         </CardContent>\n//         <Rotate>\n//           <IconButton\n//             className={expanded ? \"expandOpen\" : \"expand\"}\n//             onClick={handleExpandClick}\n//             // onClick={() => setExpanded({ expanded: index })}\n//             // selected={this.determineItemStyle(i)}\n//             aria-expanded={expanded}\n//             aria-label=\"show more\"\n//           >\n//             <ExpandMoreIcon />\n//           </IconButton>\n//         </Rotate>\n//         <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n//           <CardContent className=\"replyContainer\">\n//             {message.children && message.children.length && message.children.length > 0 && message.children.map((reply) => (\n//               <CardContent key={reply._id} className=\"replyCard\">\n//                 <CardHeader\n//                   avatar={\n//                     <Avatar aria-label=\"author\">\n//                       R\n//                   </Avatar>\n//                   }\n//                   title={userName}\n//                   subheader={<Timestamp createdAt={reply.createdAt} />}\n//                 />\n//                 <Typography variant=\"body2\" color=\"textSecondary\">{reply.message}</Typography>\n//               </CardContent>\n//             ))}\n//           </CardContent>\n//         </Collapse>\n//       </Card>\n//     ))\n//     }\n//   </Main>\n// )\n// }\n"]},"metadata":{},"sourceType":"module"}