{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: []\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload;\n    },\n    setPostedMessage: (state, action) => {\n      state.messages = action.payload;\n    }\n  }\n}); //GET MESSAGES\n\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/').then(res => res.json()).then(json => {\n      console.log(json);\n      dispatch(messages.actions.setMessage(json));\n    });\n  };\n}; //POST MESSAGES\n\nexport const postMessage = (message, author, id) => {\n  fetch(\"http://localhost:8080/\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      message,\n      author,\n      id\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(() => setPostedMessage(message, author, id)).catch(() => {\n    console.error(e);\n  });\n}; // //GET ALL MESSAGES\n// export const fetchMessages = () => {\n//   return (dispatch) => {\n//     // dispatch(ui.actions.setLoading(true))\n//     fetch(`http://localhost:8080/`)\n//       .then(res => res.json())\n//       .then(json => {\n//         console.log(json);\n//         dispatch(messages.actions.setMessage(json))\n//         // dispatch(ui.actions.setLoading(false))\n//       })\n//   }\n// }","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/reducers/messages.js"],"names":["createSlice","messages","name","initialState","reducers","setMessage","state","action","payload","setPostedMessage","fetchMessages","dispatch","fetch","then","res","json","console","log","actions","postMessage","message","author","id","method","body","JSON","stringify","headers","catch","error","e"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAGD,WAAW,CAAC;AAClCE,EAAAA,IAAI,EAAE,UAD4B;AAElCC,EAAAA,YAAY,EAAE;AACZF,IAAAA,QAAQ,EAAE;AADE,GAFoB;AAKlCG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACL,QAAN,GAAiBM,MAAM,CAACC,OAAxB;AACD,KAHO;AAIRC,IAAAA,gBAAgB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACL,QAAN,GAAiBM,MAAM,CAACC,OAAxB;AACD;AANO;AALwB,CAAD,CAA5B,C,CAeP;;AACA,OAAO,MAAME,aAAa,GAAG,MAAM;AACjC,SAAQC,QAAD,IAAc;AACnBC,IAAAA,KAAK,CAAC,wBAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESE,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAJ,MAAAA,QAAQ,CAACV,QAAQ,CAACiB,OAAT,CAAiBb,UAAjB,CAA4BU,IAA5B,CAAD,CAAR;AACD,KALH;AAMD,GAPD;AAQD,CATM,C,CAWP;;AACA,OAAO,MAAMI,WAAW,GAAG,CAACC,OAAD,EAAUC,MAAV,EAAkBC,EAAlB,KAAyB;AAClDV,EAAAA,KAAK,CAAC,wBAAD,EAA2B;AAC9BW,IAAAA,MAAM,EAAE,MADsB;AAE9BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,MAAAA,OAAF;AAAWC,MAAAA,MAAX;AAAmBC,MAAAA;AAAnB,KAAf,CAFwB;AAG9BK,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHqB,GAA3B,CAAL,CAKGd,IALH,CAKQ,MAAMJ,gBAAgB,CAACW,OAAD,EAAUC,MAAV,EAAkBC,EAAlB,CAL9B,EAMGM,KANH,CAMS,MAAM;AACXZ,IAAAA,OAAO,CAACa,KAAR,CAAcC,CAAd;AACD,GARH;AASD,CAVM,C,CAaP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: []\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload\n    },\n    setPostedMessage: (state, action) => {\n      state.messages = action.payload\n    }\n  }\n})\n\n//GET MESSAGES\nexport const fetchMessages = () => {\n  return (dispatch) => {\n    fetch('http://localhost:8080/')\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        dispatch(messages.actions.setMessage(json));\n      });\n  };\n};\n\n//POST MESSAGES\nexport const postMessage = (message, author, id) => {\n  fetch(\"http://localhost:8080/\", {\n    method: \"POST\",\n    body: JSON.stringify({ message, author, id }),\n    headers: { \"Content-Type\": \"application/json\" }\n  })\n    .then(() => setPostedMessage(message, author, id))\n    .catch(() => {\n      console.error(e);\n    })\n}\n\n\n// //GET ALL MESSAGES\n// export const fetchMessages = () => {\n//   return (dispatch) => {\n//     // dispatch(ui.actions.setLoading(true))\n//     fetch(`http://localhost:8080/`)\n//       .then(res => res.json())\n\n//       .then(json => {\n//         console.log(json);\n//         dispatch(messages.actions.setMessage(json))\n//         // dispatch(ui.actions.setLoading(false))\n//       })\n//   }\n// }"]},"metadata":{},"sourceType":"module"}