{"ast":null,"code":"import _slicedToArray from \"/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/components/ShowMessages.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchMessages } from 'reducers/messages';\nimport { Card } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { PostMessage } from './PostMessage';\nimport { ReplyMessage } from './ReplyMessage';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Timestamp } from 'components/Timestamp';\nconst Main = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n& {\n.messageCard {\n  margin: 10px;\n  width: 400px;\n}\n}\n`; // const Card = styled.div`\n// width: 400px;\n// /* border: 1px solid lightgrey; */\n// `\n\nconst Rotate = styled.div`\n& {\n  .expand {\n    transform: rotate(0deg);\n    margin-left: auto;\n    background: red;\n  }\n  .expandOpen {\n    transform: rotate(180deg);\n    background: green;\n  }\n}\n`; // const Rotate = styled.div`\n//   transform: ${props => (props.id ? \"rotate(0deg)\" : \"rotate(180deg)\")};\n//     background: ${props => (props.id ? \"red\" : \"green\")};\n//   `\n\nexport const ShowMessages = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        expanded = _useState2[0],\n        setExpanded = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isOpen = _useState4[0],\n        setIsOpen = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        messages = _useState6[0],\n        setMessages = _useState6[1]; //GET MESSAGES\n\n\n  useEffect(() => {\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {\n      setMessages(json);\n      console.log(json);\n      json.forEach(message => isOpen.push({\n        messageId: message._id,\n        messageText: message.message,\n        index: false\n      })); //I suppose you can get an id or similar identifers\n      // setIsOpen(json.map((message, index) => (index = false)));\n    });\n  }, []); // const handleDropdownClick = e => {\n  //   e.preventDefault();\n  //   const currentID = e.currentTarget.id;\n  //   const newIsOpenState = isOpen[id] = !isOpen[id];\n  //   setIsOpen(newIsOpenState);\n  // };\n  // const handleDropdownClick = index => {\n  //   const expanded = isOpen;\n  //   expanded[index] = !expanded[index];\n  //   setIsOpen(expanded);\n  // }\n  // const [selectedPost, setSelectedPost] = useState({})\n\n  console.log(\"isopen\", isOpen); // const dispatch = useDispatch();\n  // const handleExpandClick = () => {\n  //   setExpanded({ selectedItem: i })\n  // };\n  // useEffect(() => {\n  //   dispatch(fetchMessages());\n  // }, [dispatch]);\n  // const messages = useSelector((state) => state.messages.messages)\n  // const indexFalse = () => {\n  // setExpanded(messages.map((message, index) => { index: false }));\n  // messages.forEach(message => expanded.push({ messageId: message._id, index: false }))\n  //I suppose you can get an id or similar identifers\n  // }\n  // indexFalse()\n\n  console.log(messages[0]); // const handleDropdownClick = ({ e, messageId, index }) => {\n  //   console.log(messageId, index)\n  //   const currentID = e.currentTarget.messageId;\n  //   console.log(currentID)\n  //   const newIsOpenState = isOpen[currentID] = !isOpen[currentID];\n  //   setIsOpen(newIsOpenState);\n  // };\n\n  const handleDropdownClick = ({\n    e,\n    messageId,\n    index\n  }) => {\n    const clicked = isOpen;\n    clicked[index] = !clicked[index];\n    setIsOpen(clicked);\n    console.log(messageId, index);\n    console.log(\"clicked\", clicked);\n    console.log(\"isope \", isOpen[index]);\n  }; // const handleDropdownClick = ({ e, index }) => {\n  //   const currentOpenState = isOpen;\n  //   const clickedLink = e.target.index // use your own identifier\n  //   currentOpenState[clickedLink].index = !currentOpenState[clickedLink].index;\n  //   setIsOpen(currentOpenState);\n  //   console.log(\"clicked\", clickedLink)\n  //   console.log(\"isopen+index \", isOpen[index])\n  // }\n  // const selectedMessageId = messages._id;\n  // const isMessageSelected = messages._id === selectedMessageId;\n  // console.log(\"id\", messages._id)\n  // console.log(\"selecetd\", isMessageSelected)\n  // const handleExpandClick = () => {\n  //   setExpanded(!expanded);\n  // };\n\n\n  return React.createElement(Main, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(PostMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }), messages.map((message, index) => React.createElement(Card, {\n    className: \"messageCard\",\n    key: message._id,\n    id: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    avatar: React.createElement(Avatar, {\n      \"aria-label\": \"author\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"R\"),\n    title: message.author,\n    subheader: React.createElement(Timestamp, {\n      createdAt: message.createdAt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Message: \", message.message), React.createElement(ReplyMessage, {\n    parentId: message._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  })), React.createElement(Rotate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    className: isOpen ? \"expandOpen\" : \"expand\" // onClick={handleDropdownClick}\n    ,\n    onClick: () => setIsOpen(isOpen[index]) // selected={this.determineItemStyle(i)}\n    ,\n    \"aria-expanded\": isOpen,\n    \"aria-label\": \"show more\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(ExpandMoreIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }))), React.createElement(Collapse, {\n    in: isOpen[index],\n    timeout: \"auto\",\n    unmountOnExit: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"Replies:\"), React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"Heat 1/2 cup of the broth in a pot until simmering, add saffron and set aside for 10 minutes.\")))))) // <MessageBox>\n  //   <PostMessage />\n  //   {messages.map((message) => (\n  //     <Card className=\"messageCard\" key={message._id}>\n  //       <div>Message: {message.message}</div>\n  //       <div>Author: {message.author}</div>\n  //       <div>Time: {message.createdAt}</div>\n  //       <ReplyMessage id={message._id} />\n  //     </Card>\n  //   ))}\n  // </MessageBox>\n  ;\n};","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/components/ShowMessages.js"],"names":["React","useState","useEffect","useSelector","useDispatch","fetchMessages","Card","styled","PostMessage","ReplyMessage","CardHeader","CardContent","Collapse","Avatar","IconButton","Typography","ExpandMoreIcon","Timestamp","Main","div","Rotate","ShowMessages","props","expanded","setExpanded","isOpen","setIsOpen","messages","setMessages","fetch","then","res","json","console","log","forEach","message","push","messageId","_id","messageText","index","handleDropdownClick","e","clicked","map","author","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchMessages } from 'reducers/messages';\nimport { Card } from '@material-ui/core';\nimport styled from 'styled-components'\nimport { PostMessage } from './PostMessage';\nimport { ReplyMessage } from './ReplyMessage';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Timestamp } from 'components/Timestamp'\n\nconst Main = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n& {\n.messageCard {\n  margin: 10px;\n  width: 400px;\n}\n}\n`\n// const Card = styled.div`\n// width: 400px;\n// /* border: 1px solid lightgrey; */\n// `\n\nconst Rotate = styled.div`\n& {\n  .expand {\n    transform: rotate(0deg);\n    margin-left: auto;\n    background: red;\n  }\n  .expandOpen {\n    transform: rotate(180deg);\n    background: green;\n  }\n}\n`\n\n// const Rotate = styled.div`\n//   transform: ${props => (props.id ? \"rotate(0deg)\" : \"rotate(180deg)\")};\n//     background: ${props => (props.id ? \"red\" : \"green\")};\n//   `\n\nexport const ShowMessages = (props) => {\n  const [expanded, setExpanded] = useState(false)\n  const [isOpen, setIsOpen] = useState([]);\n  const [messages, setMessages] = useState([]);\n\n\n  //GET MESSAGES\n  useEffect(() => {\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n        setMessages(json);\n        console.log(json)\n        json.forEach(message => isOpen.push({ messageId: message._id, messageText: message.message, index: false })) //I suppose you can get an id or similar identifers\n\n        // setIsOpen(json.map((message, index) => (index = false)));\n      });\n  }, [])\n\n\n  // const handleDropdownClick = e => {\n  //   e.preventDefault();\n  //   const currentID = e.currentTarget.id;\n  //   const newIsOpenState = isOpen[id] = !isOpen[id];\n  //   setIsOpen(newIsOpenState);\n  // };\n\n  // const handleDropdownClick = index => {\n  //   const expanded = isOpen;\n  //   expanded[index] = !expanded[index];\n  //   setIsOpen(expanded);\n  // }\n  // const [selectedPost, setSelectedPost] = useState({})\n  console.log(\"isopen\", isOpen)\n\n  // const dispatch = useDispatch();\n\n  // const handleExpandClick = () => {\n  //   setExpanded({ selectedItem: i })\n  // };\n\n\n  // useEffect(() => {\n  //   dispatch(fetchMessages());\n  // }, [dispatch]);\n\n  // const messages = useSelector((state) => state.messages.messages)\n\n\n  // const indexFalse = () => {\n  // setExpanded(messages.map((message, index) => { index: false }));\n  // messages.forEach(message => expanded.push({ messageId: message._id, index: false }))\n  //I suppose you can get an id or similar identifers\n  // }\n  // indexFalse()\n\n  console.log(messages[0])\n\n  // const handleDropdownClick = ({ e, messageId, index }) => {\n  //   console.log(messageId, index)\n\n  //   const currentID = e.currentTarget.messageId;\n  //   console.log(currentID)\n  //   const newIsOpenState = isOpen[currentID] = !isOpen[currentID];\n  //   setIsOpen(newIsOpenState);\n  // };\n\n  const handleDropdownClick = ({ e, messageId, index }) => {\n    const clicked = isOpen;\n    clicked[index] = !clicked[index];\n    setIsOpen(clicked);\n    console.log(messageId, index)\n\n    console.log(\"clicked\", clicked)\n    console.log(\"isope \", isOpen[index])\n  };\n\n  // const handleDropdownClick = ({ e, index }) => {\n  //   const currentOpenState = isOpen;\n  //   const clickedLink = e.target.index // use your own identifier\n  //   currentOpenState[clickedLink].index = !currentOpenState[clickedLink].index;\n  //   setIsOpen(currentOpenState);\n  //   console.log(\"clicked\", clickedLink)\n  //   console.log(\"isopen+index \", isOpen[index])\n  // }\n  // const selectedMessageId = messages._id;\n  // const isMessageSelected = messages._id === selectedMessageId;\n  // console.log(\"id\", messages._id)\n  // console.log(\"selecetd\", isMessageSelected)\n\n  // const handleExpandClick = () => {\n  //   setExpanded(!expanded);\n  // };\n\n  return (\n    <Main>\n      <PostMessage />\n      {messages.map((message, index) => (\n        <Card className=\"messageCard\" key={message._id} id={index}>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"author\">\n                R\n          </Avatar>\n            }\n            title={message.author}\n            subheader={<Timestamp createdAt={message.createdAt} />}\n          />\n          <CardContent>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\">\n              Message: {message.message}\n            </Typography>\n            <ReplyMessage parentId={message._id} />\n          </CardContent>\n          <Rotate>\n            <IconButton\n              className={isOpen ? \"expandOpen\" : \"expand\"}\n              // onClick={handleDropdownClick}\n              onClick={() => setIsOpen(isOpen[index])}\n              // selected={this.determineItemStyle(i)}\n              aria-expanded={isOpen}\n              aria-label=\"show more\"\n            >\n              <ExpandMoreIcon />\n            </IconButton>\n          </Rotate>\n\n          <Collapse in={isOpen[index]} timeout=\"auto\" unmountOnExit>\n            <CardContent>\n              <Typography>Replies:</Typography>\n              <Typography>\n                Heat 1/2 cup of the broth in a pot until simmering, add saffron and\n                set aside for 10 minutes.\n          </Typography>\n            </CardContent>\n          </Collapse>\n        </Card>\n      ))}\n    </Main>\n\n\n    // <MessageBox>\n    //   <PostMessage />\n\n    //   {messages.map((message) => (\n    //     <Card className=\"messageCard\" key={message._id}>\n    //       <div>Message: {message.message}</div>\n    //       <div>Author: {message.author}</div>\n    //       <div>Time: {message.createdAt}</div>\n    //       <ReplyMessage id={message._id} />\n\n    //     </Card>\n    //   ))}\n    // </MessageBox>\n  )\n}"]},"metadata":{},"sourceType":"module"}