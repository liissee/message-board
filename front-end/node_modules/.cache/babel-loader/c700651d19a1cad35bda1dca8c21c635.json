{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n    replies: {}\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload;\n    },\n    setPostedMessage: (state, action) => {\n      state = action.payload;\n    },\n    setReplyMessage: (state, action) => {\n      state.messages = action.payload; // const { parentId, message } = action.payload\n      // const reply = state.messages.filter((r) => r.id === parentId)\n      // state.replies.push({\n      //   reply\n      // })\n      //  const replies = {};\n      // move all the comments into a map of id => comment\n      // state.messages.forEach(comment => state.replies[comment._id] = comment);\n      // // iterate over the comments again and correctly nest the children\n      // state.messages.forEach(comment => {\n      //   if (comment.parentId !== null) {\n      //     const parent = state.replies[comment.parentId];\n      //     parent.children = (parent.children || []).push(comment);\n      //   }\n      // });\n      // filter the list to return a list of correctly nested comments\n      // return state.messages.filter(comment => {\n      //   return comment.parentId === null;\n      // });\n    }\n  }\n}); //GET MESSAGES\n\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {\n      console.log(json);\n\n      const replies = function (json, root) {\n        const nestedMessages = {};\n        json.forEach(message => {\n          Object.assign(nestedMessages[message._id] = nestedMessages[message._id] || {}, message);\n          nestedMessages[message.parentId] = nestedMessages[message.parentId] || {};\n          nestedMessages[message.parentId].children = nestedMessages[message.parentId].children || [];\n          nestedMessages[message.parentId].children.push(nestedMessages[message._id]);\n        });\n        console.log(nestedMessages);\n        return nestedMessages[root].children;\n      }(json, null);\n\n      console.log(replies);\n      dispatch(messages.actions.setMessage(replies));\n    });\n  };\n}; //POST MESSAGES\n\nexport const postMessages = ({\n  message,\n  author,\n  parentId,\n  children\n}) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message,\n        author,\n        parentId,\n        children\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      dispatch(messages.actions.setPostedMessage(message, author, parentId, children));\n    }).catch(() => {\n      console.log(\"Failed to post message\");\n    });\n  };\n}; // //POST REPLY\n// export const replyMessage = ({ message, author, id }) => {\n//   return dispatch => {\n//     fetch(`http://localhost:8080/messages/${id}/reply`, {\n//       method: \"POST\",\n//       body: JSON.stringify({ message, author, parentId: id }),\n//       headers: { \"Content-Type\": \"application/json\" }\n//     })\n//       .then(res => {\n//         dispatch(messages.actions.setReplyMessage({ message, author, parentId: id }));\n//         console.log(message)\n//       })\n//       .catch(console.log(\"Failed to reply\"))\n//   };\n// };","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/reducers/messages.js"],"names":["createSlice","messages","name","initialState","replies","reducers","setMessage","state","action","payload","setPostedMessage","setReplyMessage","fetchMessages","dispatch","fetch","then","res","json","console","log","root","nestedMessages","forEach","message","Object","assign","_id","parentId","children","push","actions","postMessages","author","method","body","JSON","stringify","headers","catch"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n    replies: {}\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload\n    },\n    setPostedMessage: (state, action) => {\n      state = action.payload\n    },\n    setReplyMessage: (state, action) => {\n      state.messages = action.payload\n\n      // const { parentId, message } = action.payload\n      // const reply = state.messages.filter((r) => r.id === parentId)\n\n      // state.replies.push({\n      //   reply\n      // })\n\n      //  const replies = {};\n\n      // move all the comments into a map of id => comment\n      // state.messages.forEach(comment => state.replies[comment._id] = comment);\n\n      // // iterate over the comments again and correctly nest the children\n      // state.messages.forEach(comment => {\n      //   if (comment.parentId !== null) {\n      //     const parent = state.replies[comment.parentId];\n      //     parent.children = (parent.children || []).push(comment);\n      //   }\n      // });\n\n      // filter the list to return a list of correctly nested comments\n      // return state.messages.filter(comment => {\n      //   return comment.parentId === null;\n      // });\n\n    }\n  }\n})\n\n\n//GET MESSAGES\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        const replies = function (json, root) {\n          const nestedMessages = {};\n          json.forEach(message => {\n            Object.assign(nestedMessages[message._id] = nestedMessages[message._id] || {}, message);\n            nestedMessages[message.parentId] = nestedMessages[message.parentId] || {};\n            nestedMessages[message.parentId].children = nestedMessages[message.parentId].children || [];\n            nestedMessages[message.parentId].children.push(nestedMessages[message._id]);\n\n          });\n          console.log(nestedMessages)\n          return nestedMessages[root].children;\n        }(json, null);\n\n        console.log(replies);\n        dispatch(messages.actions.setMessage(replies));\n      });\n  };\n};\n\n\n//POST MESSAGES\nexport const postMessages = ({ message, author, parentId, children }) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({ message, author, parentId, children }),\n      headers: { \"Content-Type\": \"application/json\" }\n    })\n      .then(res => {\n        dispatch(messages.actions.setPostedMessage(message, author, parentId, children));\n      })\n      .catch(() => {\n        console.log(\"Failed to post message\")\n      })\n  }\n};\n\n\n// //POST REPLY\n// export const replyMessage = ({ message, author, id }) => {\n//   return dispatch => {\n//     fetch(`http://localhost:8080/messages/${id}/reply`, {\n//       method: \"POST\",\n//       body: JSON.stringify({ message, author, parentId: id }),\n//       headers: { \"Content-Type\": \"application/json\" }\n//     })\n//       .then(res => {\n//         dispatch(messages.actions.setReplyMessage({ message, author, parentId: id }));\n//         console.log(message)\n\n//       })\n//       .catch(console.log(\"Failed to reply\"))\n//   };\n// };\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}