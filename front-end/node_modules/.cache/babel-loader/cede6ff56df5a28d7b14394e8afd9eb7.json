{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n    replies: {}\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload;\n    },\n    setPostedMessage: (state, action) => {\n      state = action.payload;\n    },\n    setReplyMessage: (state, action) => {\n      const _action$payload = action.payload,\n            parentId = _action$payload.parentId,\n            message = _action$payload.message;\n      const reply = state.messages.filter(r => r.id === parentId);\n      state.replies.push({\n        reply\n      }); //  const replies = {};\n      // move all the comments into a map of id => comment\n      // state.messages.forEach(comment => state.replies[comment._id] = comment);\n      // // iterate over the comments again and correctly nest the children\n      // state.messages.forEach(comment => {\n      //   if (comment.parentId !== null) {\n      //     const parent = state.replies[comment.parentId];\n      //     parent.children = (parent.children || []).push(comment);\n      //   }\n      // });\n      // filter the list to return a list of correctly nested comments\n      // return state.messages.filter(comment => {\n      //   return comment.parentId === null;\n      // });\n    }\n  }\n}); //GET MESSAGES\n\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {\n      console.log(json);\n      dispatch(messages.actions.setMessage(json));\n    });\n  };\n}; //GET REPLIES\n\nexport const fetchReplies = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {\n      json.forEach(comment => state.replies[comment.id] = comment);\n      console.log(json);\n      dispatch(messages.actions.setReplyMessage(json));\n    });\n  };\n}; //POST MESSAGES\n\nexport const postMessages = ({\n  message,\n  author,\n  parentId\n}) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message,\n        author,\n        parentId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      dispatch(messages.actions.setPostedMessage(message, author, parentId));\n    }).catch(() => {\n      console.log(\"Failed to post message\");\n    });\n  };\n}; // //POST REPLY\n// export const replyMessage = ({ message, author, id }) => {\n//   return dispatch => {\n//     fetch(`http://localhost:8080/messages/${id}/reply`, {\n//       method: \"POST\",\n//       body: JSON.stringify({ message, author, parentId: id }),\n//       headers: { \"Content-Type\": \"application/json\" }\n//     })\n//       .then(res => {\n//         dispatch(messages.actions.setReplyMessage({ message, author, parentId: id }));\n//         console.log(message)\n//       })\n//       .catch(console.log(\"Failed to reply\"))\n//   };\n// };","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/reducers/messages.js"],"names":["createSlice","messages","name","initialState","replies","reducers","setMessage","state","action","payload","setPostedMessage","setReplyMessage","parentId","message","reply","filter","r","id","push","fetchMessages","dispatch","fetch","then","res","json","console","log","actions","fetchReplies","forEach","comment","postMessages","author","method","body","JSON","stringify","headers","catch"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAGD,WAAW,CAAC;AAClCE,EAAAA,IAAI,EAAE,UAD4B;AAElCC,EAAAA,YAAY,EAAE;AACZF,IAAAA,QAAQ,EAAE,EADE;AAEZG,IAAAA,OAAO,EAAE;AAFG,GAFoB;AAMlCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACN,QAAN,GAAiBO,MAAM,CAACC,OAAxB;AACD,KAHO;AAIRC,IAAAA,gBAAgB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,GAAGC,MAAM,CAACC,OAAf;AACD,KANO;AAORE,IAAAA,eAAe,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAAA,8BACJA,MAAM,CAACC,OADH;AAAA,YAC1BG,QAD0B,mBAC1BA,QAD0B;AAAA,YAChBC,OADgB,mBAChBA,OADgB;AAElC,YAAMC,KAAK,GAAGP,KAAK,CAACN,QAAN,CAAec,MAAf,CAAuBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASL,QAAtC,CAAd;AAEAL,MAAAA,KAAK,CAACH,OAAN,CAAcc,IAAd,CAAmB;AACjBJ,QAAAA;AADiB,OAAnB,EAJkC,CAQlC;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAED;AAjCO;AANwB,CAAD,CAA5B,C,CA4CP;;AACA,OAAO,MAAMK,aAAa,GAAG,MAAM;AACjC,SAAOC,QAAQ,IAAI;AACjBC,IAAAA,KAAK,CAAC,gCAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESE,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAJ,MAAAA,QAAQ,CAACnB,QAAQ,CAAC0B,OAAT,CAAiBrB,UAAjB,CAA4BkB,IAA5B,CAAD,CAAR;AACD,KALH;AAMD,GAPD;AAQD,CATM,C,CAWP;;AACA,OAAO,MAAMI,YAAY,GAAG,MAAM;AAChC,SAAOR,QAAQ,IAAI;AACjBC,IAAAA,KAAK,CAAC,gCAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESE,IAAD,IAAU;AAEdA,MAAAA,IAAI,CAACK,OAAL,CAAaC,OAAO,IAAIvB,KAAK,CAACH,OAAN,CAAc0B,OAAO,CAACb,EAAtB,IAA4Ba,OAApD;AAEAL,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAJ,MAAAA,QAAQ,CAACnB,QAAQ,CAAC0B,OAAT,CAAiBhB,eAAjB,CAAiCa,IAAjC,CAAD,CAAR;AACD,KARH;AASD,GAVD;AAWD,CAZM,C,CAcP;;AACA,OAAO,MAAMO,YAAY,GAAG,CAAC;AAAElB,EAAAA,OAAF;AAAWmB,EAAAA,MAAX;AAAmBpB,EAAAA;AAAnB,CAAD,KAAmC;AAC7D,SAAOQ,QAAQ,IAAI;AACjBC,IAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCY,MAAAA,MAAM,EAAE,MAD8B;AAEtCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEvB,QAAAA,OAAF;AAAWmB,QAAAA,MAAX;AAAmBpB,QAAAA;AAAnB,OAAf,CAFgC;AAGtCyB,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAH6B,KAAnC,CAAL,CAKGf,IALH,CAKQC,GAAG,IAAI;AACXH,MAAAA,QAAQ,CAACnB,QAAQ,CAAC0B,OAAT,CAAiBjB,gBAAjB,CAAkCG,OAAlC,EAA2CmB,MAA3C,EAAmDpB,QAAnD,CAAD,CAAR;AACD,KAPH,EAQG0B,KARH,CAQS,MAAM;AACXb,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,KAVH;AAWD,GAZD;AAaD,CAdM,C,CAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n    replies: {}\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload\n    },\n    setPostedMessage: (state, action) => {\n      state = action.payload\n    },\n    setReplyMessage: (state, action) => {\n      const { parentId, message } = action.payload\n      const reply = state.messages.filter((r) => r.id === parentId)\n\n      state.replies.push({\n        reply\n      })\n\n      //  const replies = {};\n\n      // move all the comments into a map of id => comment\n      // state.messages.forEach(comment => state.replies[comment._id] = comment);\n\n      // // iterate over the comments again and correctly nest the children\n      // state.messages.forEach(comment => {\n      //   if (comment.parentId !== null) {\n      //     const parent = state.replies[comment.parentId];\n      //     parent.children = (parent.children || []).push(comment);\n      //   }\n      // });\n\n      // filter the list to return a list of correctly nested comments\n      // return state.messages.filter(comment => {\n      //   return comment.parentId === null;\n      // });\n\n    }\n  }\n})\n\n\n//GET MESSAGES\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        dispatch(messages.actions.setMessage(json));\n      });\n  };\n};\n\n//GET REPLIES\nexport const fetchReplies = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n\n        json.forEach(comment => state.replies[comment.id] = comment);\n\n        console.log(json);\n        dispatch(messages.actions.setReplyMessage(json));\n      });\n  };\n};\n\n//POST MESSAGES\nexport const postMessages = ({ message, author, parentId }) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({ message, author, parentId }),\n      headers: { \"Content-Type\": \"application/json\" }\n    })\n      .then(res => {\n        dispatch(messages.actions.setPostedMessage(message, author, parentId));\n      })\n      .catch(() => {\n        console.log(\"Failed to post message\")\n      })\n  }\n};\n\n\n// //POST REPLY\n// export const replyMessage = ({ message, author, id }) => {\n//   return dispatch => {\n//     fetch(`http://localhost:8080/messages/${id}/reply`, {\n//       method: \"POST\",\n//       body: JSON.stringify({ message, author, parentId: id }),\n//       headers: { \"Content-Type\": \"application/json\" }\n//     })\n//       .then(res => {\n//         dispatch(messages.actions.setReplyMessage({ message, author, parentId: id }));\n//         console.log(message)\n\n//       })\n//       .catch(console.log(\"Failed to reply\"))\n//   };\n// };\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}