{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { ui } from 'reducers/ui';\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n    message: \"\"\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload;\n    },\n    setPostedMessage: (state, action) => {\n      //  state = action.payload\n      state.message.push(action.payload);\n    },\n    deleteMessage: (state, action) => {\n      // Filter out all message but the message with matching id\n      state.messages = state.messages.filter(message => message._id !== action.payload);\n    },\n    editMessage: (state, action) => {\n      // To find the message we want to update (message data = action.payload)\n      // If message found, return the message with updated data\n      state.messages = state.messages.map(message => {\n        if (message._id === action.payload._id) {\n          return action.payload;\n        } else {\n          // Otherwhise return message as is\n          return message;\n        }\n      });\n    }\n  }\n}); //GET MESSAGES\n\nexport const fetchMessages = () => {\n  return dispatch => {\n    dispatch(ui.actions.setLoading(true));\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {\n      console.log(json);\n\n      if (json[0]) {\n        const replies = function (json, root) {\n          const nestedMessages = {};\n          json.forEach(message => {\n            Object.assign(nestedMessages[message._id] = nestedMessages[message._id] || {}, message);\n            nestedMessages[message.parentId] = nestedMessages[message.parentId] || {};\n            nestedMessages[message.parentId].children = nestedMessages[message.parentId].children || [];\n            nestedMessages[message.parentId].children.push(nestedMessages[message._id]);\n          });\n          return nestedMessages[root].children;\n        }(json, null);\n\n        dispatch(messages.actions.setMessage(replies));\n        dispatch(ui.actions.setLoading(false));\n        console.log(replies);\n      } else {\n        dispatch(messages.actions.setMessage(json));\n        dispatch(ui.actions.setLoading(false));\n      }\n    });\n  };\n}; //POST MESSAGES\n\nexport const postMessages = ({\n  message,\n  author,\n  parentId\n}) => {\n  return dispatch => {\n    const accessToken = localStorage.getItem('accessToken'); // dispatch(ui.actions.setLoading(true))\n\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message,\n        author,\n        parentId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: accessToken\n      }\n    }).then(res => res.json()).then(json => {\n      console.log(\"author\", author);\n      console.log(\"json post\", json);\n      dispatch(messages.actions.setPostedMessage(json)); // dispatch(messages.actions.setMessage(message));\n\n      dispatch(ui.actions.setLoading(false));\n    }).catch(() => {\n      console.log(\"Failed to post message\");\n    });\n  };\n}; // //POST MESSAGES\n// export const postMessages = ({ message, author, parentId }) => {\n//   return dispatch => {\n//     const accessToken = localStorage.getItem('accessToken')\n//     // dispatch(ui.actions.setLoading(true))\n//     fetch(\"http://localhost:8080/messages\", {\n//       method: \"POST\",\n//       body: JSON.stringify({ message, author, parentId }),\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         Authorization: accessToken\n//       }\n//     })\n//       .then(res => {\n//         console.log(\"author\", author)\n//         dispatch(messages.actions.setPostedMessage(message, author, parentId));\n//         // dispatch(messages.actions.setMessage(message));\n//         dispatch(ui.actions.setLoading(false))\n//       })\n//       .catch(() => {\n//         console.log(\"Failed to post message\")\n//       })\n//   }\n// };\n// DELETE MESSAGE\n\nexport const deleteMessages = ({\n  id,\n  author\n}) => {\n  return dispatch => {\n    dispatch(ui.actions.setLoading(true));\n    const accessToken = localStorage.getItem('accessToken');\n    const userId = localStorage.getItem('userId');\n    fetch(`http://localhost:8080/messages/${id}`, {\n      method: 'DELETE',\n      statusCode: 204,\n      body: JSON.stringify({\n        id,\n        author,\n        userId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: accessToken\n      }\n    }).then(() => {\n      dispatch(messages.actions.deleteMessage({\n        id,\n        author,\n        userId\n      }));\n      dispatch(ui.actions.setLoading(false));\n    });\n  };\n}; //EDIT MESSAGE\n\nexport const editMessages = ({\n  id,\n  author,\n  newValue\n}) => {\n  return dispatch => {\n    dispatch(ui.actions.setLoading(true));\n    const accessToken = localStorage.getItem('accessToken');\n    const userId = localStorage.getItem('userId');\n    fetch(`http://localhost:8080/messages/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        message: newValue,\n        userId: userId,\n        author: author\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: accessToken\n      }\n    }).then(res => res.json()).then(updatedMessage => {\n      console.log(\"2\", updatedMessage);\n      dispatch(messages.actions.editMessage(updatedMessage));\n      dispatch(ui.actions.setLoading(false));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/reducers/messages.js"],"names":["createSlice","ui","messages","name","initialState","message","reducers","setMessage","state","action","payload","setPostedMessage","push","deleteMessage","filter","_id","editMessage","map","fetchMessages","dispatch","actions","setLoading","fetch","then","res","json","console","log","replies","root","nestedMessages","forEach","Object","assign","parentId","children","postMessages","author","accessToken","localStorage","getItem","method","body","JSON","stringify","headers","Authorization","catch","deleteMessages","id","userId","statusCode","editMessages","newValue","updatedMessage"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { ui } from 'reducers/ui'\n\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n    message: \"\"\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload\n    },\n    setPostedMessage: (state, action) => {\n      //  state = action.payload\n      state.message.push(action.payload)\n    },\n    deleteMessage: (state, action) => {\n      // Filter out all message but the message with matching id\n      state.messages = state.messages.filter(message => message._id !== action.payload)\n    },\n    editMessage: (state, action) => {\n      // To find the message we want to update (message data = action.payload)\n      // If message found, return the message with updated data\n      state.messages = state.messages.map((message) => {\n        if (message._id === action.payload._id) {\n          return action.payload\n        } else {\n          // Otherwhise return message as is\n          return message\n        }\n      })\n    },\n  }\n})\n\n\n//GET MESSAGES\nexport const fetchMessages = () => {\n  return dispatch => {\n    dispatch(ui.actions.setLoading(true))\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json)\n        if (json[0]) {\n          const replies = function (json, root) {\n            const nestedMessages = {};\n            json.forEach(message => {\n              Object.assign(nestedMessages[message._id] = nestedMessages[message._id] || {}, message);\n              nestedMessages[message.parentId] = nestedMessages[message.parentId] || {};\n              nestedMessages[message.parentId].children = nestedMessages[message.parentId].children || [];\n              nestedMessages[message.parentId].children.push(nestedMessages[message._id]);\n            });\n            return nestedMessages[root].children;\n          }(json, null);\n          dispatch(messages.actions.setMessage(replies));\n          dispatch(ui.actions.setLoading(false))\n          console.log(replies)\n        } else {\n          dispatch(messages.actions.setMessage(json));\n          dispatch(ui.actions.setLoading(false))\n        }\n      });\n  };\n};\n\n\n//POST MESSAGES\nexport const postMessages = ({ message, author, parentId }) => {\n  return dispatch => {\n    const accessToken = localStorage.getItem('accessToken')\n    // dispatch(ui.actions.setLoading(true))\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({ message, author, parentId }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: accessToken\n      }\n    })\n      .then(res => res.json())\n      .then((json) => {\n        console.log(\"author\", author)\n        console.log(\"json post\", json)\n\n        dispatch(messages.actions.setPostedMessage(json));\n        // dispatch(messages.actions.setMessage(message));\n        dispatch(ui.actions.setLoading(false))\n      })\n      .catch(() => {\n        console.log(\"Failed to post message\")\n      })\n  }\n};\n// //POST MESSAGES\n// export const postMessages = ({ message, author, parentId }) => {\n//   return dispatch => {\n//     const accessToken = localStorage.getItem('accessToken')\n//     // dispatch(ui.actions.setLoading(true))\n//     fetch(\"http://localhost:8080/messages\", {\n//       method: \"POST\",\n//       body: JSON.stringify({ message, author, parentId }),\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         Authorization: accessToken\n//       }\n//     })\n//       .then(res => {\n//         console.log(\"author\", author)\n//         dispatch(messages.actions.setPostedMessage(message, author, parentId));\n//         // dispatch(messages.actions.setMessage(message));\n//         dispatch(ui.actions.setLoading(false))\n//       })\n//       .catch(() => {\n//         console.log(\"Failed to post message\")\n//       })\n//   }\n// };\n\n// DELETE MESSAGE\nexport const deleteMessages = ({ id, author }) => {\n  return dispatch => {\n    dispatch(ui.actions.setLoading(true))\n    const accessToken = localStorage.getItem('accessToken')\n    const userId = localStorage.getItem('userId')\n\n    fetch(`http://localhost:8080/messages/${id}`, {\n      method: 'DELETE',\n      statusCode: 204,\n      body: JSON.stringify({ id, author, userId }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: accessToken\n      }\n    })\n      .then(() => {\n        dispatch(messages.actions.deleteMessage({ id, author, userId }))\n        dispatch(ui.actions.setLoading(false))\n      })\n  }\n}\n\n//EDIT MESSAGE\nexport const editMessages = ({ id, author, newValue }) => {\n  return dispatch => {\n    dispatch(ui.actions.setLoading(true))\n    const accessToken = localStorage.getItem('accessToken')\n    const userId = localStorage.getItem('userId')\n    fetch(`http://localhost:8080/messages/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify({ message: newValue, userId: userId, author: author }),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: accessToken\n      }\n    })\n      .then((res) => res.json())\n      .then((updatedMessage) => {\n        console.log(\"2\", updatedMessage)\n        dispatch(messages.actions.editMessage(updatedMessage))\n        dispatch(ui.actions.setLoading(false))\n      })\n  }\n}"]},"metadata":{},"sourceType":"module"}