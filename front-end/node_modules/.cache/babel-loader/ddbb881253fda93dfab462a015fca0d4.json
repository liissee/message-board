{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { ui } from 'reducers/ui';\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: []\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload;\n    },\n    setPostedMessage: (state, action) => {\n      //  state = action.payload\n      state.message.push(action.payload);\n    },\n    deleteMessage: (state, action) => {\n      // Filter out all message but the message with matching id\n      state.messages = state.messages.filter(message => message._id !== action.payload);\n    }\n  }\n}); //GET MESSAGES\n\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages').then(res => res.json()).then(json => {\n      if (json[0]) {\n        const replies = function (json, root) {\n          const nestedMessages = {};\n          json.forEach(message => {\n            Object.assign(nestedMessages[message._id] = nestedMessages[message._id] || {}, message);\n            nestedMessages[message.parentId] = nestedMessages[message.parentId] || {};\n            nestedMessages[message.parentId].children = nestedMessages[message.parentId].children || [];\n            nestedMessages[message.parentId].children.push(nestedMessages[message._id]);\n          });\n          return nestedMessages[root].children;\n        }(json, null);\n\n        dispatch(messages.actions.setMessage(replies));\n      } else {\n        dispatch(messages.actions.setMessage(json));\n      }\n    });\n  };\n}; //POST MESSAGES\n\nexport const postMessages = ({\n  message,\n  author,\n  parentId\n}) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message,\n        author,\n        parentId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      console.log(\"author\", author);\n      dispatch(messages.actions.setPostedMessage(message, author, parentId));\n      dispatch(messages.actions.setMessage(message));\n    }).catch(() => {\n      console.log(\"Failed to post message\");\n    });\n  };\n}; // DELETE MESSAGE\n\nexport const deleteMessage = message => {\n  return dispatch => {\n    dispatch(ui.actions.setLoading(true));\n    fetch(`http://localhost:8080/messages${_id}`, {\n      method: 'DELETE'\n    }).then(() => {\n      dispatch(messages.actions.deleteMessage(message._id));\n      dispatch(ui.actions.setLoading(false));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/lindaisell/Desktop/technigo-bootcamp/message-board/front-end/src/reducers/messages.js"],"names":["createSlice","ui","messages","name","initialState","reducers","setMessage","state","action","payload","setPostedMessage","message","push","deleteMessage","filter","_id","fetchMessages","dispatch","fetch","then","res","json","replies","root","nestedMessages","forEach","Object","assign","parentId","children","actions","postMessages","author","method","body","JSON","stringify","headers","console","log","catch","setLoading"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { ui } from 'reducers/ui'\n\nexport const messages = createSlice({\n  name: 'messages',\n  initialState: {\n    messages: [],\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.messages = action.payload\n    },\n    setPostedMessage: (state, action) => {\n      //  state = action.payload\n      state.message.push(action.payload)\n    },\n    deleteMessage: (state, action) => {\n      // Filter out all message but the message with matching id\n      state.messages = state.messages.filter(message => message._id !== action.payload)\n    }\n  }\n})\n\n\n//GET MESSAGES\nexport const fetchMessages = () => {\n  return dispatch => {\n    fetch('http://localhost:8080/messages')\n      .then((res) => res.json())\n      .then((json) => {\n        if (json[0]) {\n          const replies = function (json, root) {\n            const nestedMessages = {};\n            json.forEach(message => {\n              Object.assign(nestedMessages[message._id] = nestedMessages[message._id] || {}, message);\n              nestedMessages[message.parentId] = nestedMessages[message.parentId] || {};\n              nestedMessages[message.parentId].children = nestedMessages[message.parentId].children || [];\n              nestedMessages[message.parentId].children.push(nestedMessages[message._id]);\n            });\n            return nestedMessages[root].children;\n          }(json, null);\n          dispatch(messages.actions.setMessage(replies));\n        } else {\n          dispatch(messages.actions.setMessage(json));\n        }\n      });\n  };\n};\n\n\n//POST MESSAGES\nexport const postMessages = ({ message, author, parentId }) => {\n  return dispatch => {\n    fetch(\"http://localhost:8080/messages\", {\n      method: \"POST\",\n      body: JSON.stringify({ message, author, parentId }),\n      headers: { \"Content-Type\": \"application/json\" }\n    })\n      .then(res => {\n        console.log(\"author\", author)\n        dispatch(messages.actions.setPostedMessage(message, author, parentId));\n        dispatch(messages.actions.setMessage(message));\n      })\n      .catch(() => {\n        console.log(\"Failed to post message\")\n      })\n  }\n};\n\n// DELETE MESSAGE\nexport const deleteMessage = (message) => {\n  return dispatch => {\n    dispatch(ui.actions.setLoading(true))\n    fetch(`http://localhost:8080/messages${_id}`, {\n      method: 'DELETE'\n    })\n      .then(() => {\n        dispatch(messages.actions.deleteMessage(message._id))\n        dispatch(ui.actions.setLoading(false))\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}